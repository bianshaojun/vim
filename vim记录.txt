day1：
1，x命令--删除光标处的字符；
2，dd命令--删除光标处的一行字符；
3，>G命令--当前行到结尾行进行缩进层级操作; 
	扩展：>表示向右缩进，G代表结尾行，也就是操作符+动作命令=操作，那么<表示向左缩进，>>,<<分别表示对当前行的操作, >2>表示当前两行缩进等等；
4，.命令--重复上一步操作，此操作可以提高vim使用效率；
	进入插入模式，在退出时也作为一次操作，返回普通模式时，也可以使用.命令重复上一次插入模式中的操作；
5，h命令--光标向左移动；
6，j命令--光标向下移动；
7，k命令--光标向上移动；
8，l命令--光标向右移动；
9，i命令--在光标字符前，进入编辑模式；
10,a命令--在光标字符后，进入编辑模式；
11，$命令--将光标移到当前行的最后一个字符；
12，^命令--将光标移动到当前行最前面一个不为空格的字符处；
13,0命令--将光标移动到当前行最前面的一个字符处；
14，A命令--在当前行的最后一个字符后，进入编辑模式；
15，I命令--在当前行的最前一个字符前，进入编辑模式；
16,s命令--删除当前字符，并进入编辑模式；
17，S命令--删除当前行，并进入编辑模式；
18，o命令--在当前行的下一行，进入编辑模式；
19，O命令--在当前行的上一行，进入编辑模式；
20，c$命令--剪切光标所在处到当前最后一个字符，并进入编辑模式；
21，C命令--等同于c$命令；
22，c^命令--剪切光标所处到最前面一个不为空格的字符处，并进入编辑模式；
23，c0命令--剪切光标所处到最前面的字符处，并进入编辑模式；
24,0C/cc命令--等同于S命令；
25，cw命令--剪切光标所处到该单词结束的位置，并进入编辑模式；
26，cn|命令--剪切光标位置到第n个字符的位置，并进入编辑模式；
27,cfx命令--剪切光标到下一个字符x之间的内容，并进入编辑模式；
28，cFx命令--剪切光标到上一个字符x之间的内容，并进入编辑模式；
29，cnG命令--剪切当前行到第n行，并进入编辑模式；
	cnc命令--剪切当前行n行，并进入编辑模式；
30，cG命令--剪切当前行到最后一行，并进入编辑模式；
31,fx命令--在当前行正向查找到x字符，光标移到该字符；
32，；命令--重复t/T/f/F操作；
33，，命令--反向重复t/T/f/F操作；
34，Fx命令--在当前行反向查找到x字符，光标移到该字符；
35，tx命令--在当前行正向查找x字符，光标移到该字符前一个字符；
36，Tx命令--在当前行反向查找x字符，光标移到该字符后一个字符；

day2
1,u命令--撤销上一次的修改；
2，ctrl+r命令--回复上一次被撤销的内容；
3，/pattern<CR>命令--文档中正向查找匹配项，n重复查找下一个，N重复查找上一个；
4，？pattern<CR>命令--文档中反向查找匹配项，n重复查找下一个，N重复查找上一个；
5，：s/target/replacement<CR>命令--查找target字串，并将其用replacement替换，&替换下一个，u撤销上一个替换；
	：%s/target/replacement/g<CR>命令--全文查找target字串，并将其用replacement替换； %表示全局上下文；
6，qx{change}q命令--q开启命令记录，将记录存在寄存器x中，记录完成，q退出命令记录，@x取出记录的操作并执行；
7，：set hls命令--设置高亮；
8，*命令--在每一行搜索光标所在的字符串，并将其高亮，重复使用将光标移动到下一个字符串；
9,b命令--将光标移动到单词的第一个字符，重复移动到前一个单词的第一个字符；
10，dw命令--删除当前光标后的单词；
11，daw命令--删除当前光标所在的单词,del a word；
12，db命令--删除当前光标到单词的开头；

day3 
1,w命令--光标移动到下一个单词的首字符；
2，W命令--光标移动到下一个单词的首字符，不识别符号；
3，B命令--将光标移动到单词的第一个字符，不识别符号；
4，cW命令--类似cw，剪切光标到该单词结束的位置，由于W所以不识别符号；
5，ctrl+a命令--正向查找数字，并将其+1，n+ctrl+a命令，将其+n；
6，ctrl+x命令--正常查找数字，并将其-1，n+ctrl+x命令，将其-n；
7，yy命令--复制当前行；
8，p命令--粘贴复制的内容，到当前行后；
9，P命令--粘贴复制的内容，到当前行前；
10，使用次数：
	删除两个单词 eg：
	d2w命令--删除2个单词；
	2dw命令--执行两次dw操作，也是删除2个单词；
	dw.命令--执行一次删除，重复一次；
11，dap命令--删除一个段落，del a paragraph；
12，dl命令--删除一个字符，del letter；
13,vim语法：
	操作符+动作命令=操作
	常用操作符：
	c--修改
	d--删除
	y--复制到寄存器
	g~--反转大小写
	gu--转换为小写
	gU--转换为大写
	>--增加缩进
	<--减少缩进
	=--自动缩进
	！--使用外部程序过滤{motion}所跨越的行
	额外规则，当一个操作符连续调用两次，他将用于当前行，eg：dd ，>> ,gUgU(gUU);
14,gg命令--跳转到文件开头；
15,G命令--跳转到文件结尾一行；

day4
1,<C-h>命令--在插入模式下，进行退格操作，等同<Backspace>；
2，<C-w>命令--在插入模式下，删除当前word；
3，<C-u>命令--在插入模式下，删除当前到本行开头；
4，<C-[>命令--在插入模式下，退出插入模式进入普通模式，等同<Esc>；
5，<C-o>命令--在插入模式下，进入一次性普通模式，允许输入一次普通模式命令，完成普通模式命令后，再次进入插入模式，下标状态  insert-->（insert）;
6,zz命令--重绘当前编辑屏幕，使编辑行重绘到屏幕中间；
7，yt{char}命令--复制光标当前字符到{char}之间；
8，<C-r>0命令--在插入模式下粘贴复制的内容；
9，<C-r>命令--在插入模式下访问寄存器；
10，<C-r>={表达式}命令-在插入模式下访问表达式寄存器，可以实现简单的计算功能，eg：<C-r>=3+2<CR>;
11,ga命令--查看当前字符的编码；
12，<C-v>{123}命令--在插入模式下，插入编码为123的字符；
13，<C-v>u{1234}命令--在插入模式下，插入编码为1234的hex的字符；
14,<C-k>{char}{char}命令--在插入模式下，插入二合字母的字符，详细见:h digraph-table或:h digraphs-default;
15,R或gR命令--进入替换模式，R将制表符当做一个字符，gR将制表符按每个占位符当做一个字符，建议使用gR；
16,r或gr命令--单次进入替换模式；
17，v命令--进入面向字符的可视模式，再次输入v，退出字符可视模式；
18，V命令--进入面向行的可视模式，再次输入V，退出行可视模式；
19，<C-v>命令--进入面向块的可视模式，再次输入，退出块可视模式
20，e命令--将光标移动到单词尾；
21.E命令--将光标移动到单词尾，不识别符号；
22，o命令--在可视模式下，切换高亮活动端；

day5 
1,:set autoindent/ai命令--开启自动缩进，noautoindent/noai(关闭自动缩进)；
2，:set shiftwhidth=4命令--设置自动缩进的宽幅为4；
3，:set softtabstop/sts=4命令--设置制表符的宽度为4；
4，:set expandtab命令--将制表符的输入，转换成softtabstop的空格；
5，gv命令--重复上一次v，V或<C-v>选取的区域并进入可视模式；
6，viw命令--选中当前光标下的word，并进入可视模式；
7，vit命令--高亮选中标签内部的内容；
8，U命令--在可视模式下，将选中的字符转成大写；u命令,将选中的字符转成小写；
9,命令模式：
	位置符号
	1 -- 文件的第一行, :1 跳转到第一行；
	$ -- 文件的最后一行；
	0 -- 文件的第一行上方，虚拟行；
	. -- 文件当前行；
	'm -- 包含位置标记m的行；
	'< -- 可视模式高亮区域的起始行；
	'> -- 可视模式高亮区域的结束行；
	% -- 整个文件，类似于 1，$;
	制定范围[range],以print为例：
	:2p -- 打印第二行；
	:1,3p -- 打印1-3行；
	:.p -- 打印当前行；
	:.,$p -- 打印当前行到最后一行；	
	:.-1,.+2p -- 打印当前行的前一行到当前行的后面第二行行之间；
	:/string1/,/string2/p -- 打印string1和string2所处行之间的内容；
	:'<,'>p -- 打印可视模式下高亮区域的内容；


day6
1,:[range]copy {address}命令--在命令模式下，把指定范围内的行拷贝到{address}所指定的行之下，简写为:co或:t；
2，:[range]move {address}命令--在命令模式下，把指定范围内的行移动到{address}所指定的行之下，简写为:m;
3,@:命令--重复上一次ex命令；
4，@@命令--重复上一次@：命令；
5,:[range]normal {commands}命令--在命令模式下，对指定范围的每一行执行普通模式命令{commands};
6,<C-o>命令--在普通模式下，跳转到上一条记录；
7,<C-d>命令--在命令模式下，显示补全列表；
8，<Tab>命令--在命令模式下，按照补全列表依次显示，反向显示<S-Tab>;
9,:[range]join命令--在命令模式下，连接指定范围内的行,简写:j;
10,:[range]delete [x]命令--在命令模式下，删除指定范围内的行[到寄存器x中]，简写为:d；
11,:[range]yank [x]命令--在命令模式下，复制指定范围内的行[到寄存器x中],简写为:y;
12,:[line]put [x]命令--在命令模式下，在指定行后粘贴寄存器x中的内容，简写为:pu;
13,:[range]substitute/{pattern}/{string}/[flags]命令--在命令模式下，把指定范围内出现的{pattern}替换成{string}，简写:s;
14,:[range]globle/{pattern}/[cmd]命令--在命令模式下，对指定范围内匹配{pattern}的所有行，在其上执行ex命令{cmd}；

day7
1,<C-r><C-w>命令--在命令模式下，插入当前光标下的单词到命令行下；
2,<C-r><C-a>命令--在命令模式下，插入当前光标下的字符串到命令行下；
3,查看历史命令--在命令模式下，按up或down来翻看历史命令（<C-p>或<C-n>），:xxx<up>，翻看带xxx关键字的历史命令；
4,:!{cmd}命令--在命令模式下，执行一次shell命令；
5,:shell命令--在命令模式下，进入shell，执行完shell命令，exit退出返回vim；
6,:read !{cmd}--在命令模式下，读取cmd输出的值，插入到当前光标下；
7,:[range]write !{cmd}--在命令模式下，将range范围的内容，写到cmd命令作为输入；
8,:[range]!{filter}--在命令模式下，将range范围的内容，输入给外部程序；
9,q:命令--打开命令行窗口
10,:ls命令--当多文件在缓冲区时，在命令模式下，可以查看当前缓冲区的文件列表；
11,:bnext命令--当多文件在缓冲区时，在命令模式下，切换到下一个文件；简写：bn
	：bprev命令--切换到上一个文件；简写：bp
	：bfrist命令--切换到第一个文件；简写：bf
	：blast命令--切换到最后一个文件；简写：bl
	：buffer num命令--切换到编号num的文件；简写：b num
	：buffer filename命令--切换到文件名的文件；简写：b filename
12,:bdelete命令--删除当前缓冲区的文件；简写：bd
	:bd num命令--删除编号num的缓冲区文件；
	:[range]bd命令--删除编号范围range的缓冲区文件；
13,:args命令--显示当前缓冲区参数列表；
	:args {arglist}命令--重新设置缓冲区参数列表；
	:next命令--参数列表中下一个文件；简写：n
	:prev命令--参数列表中上一个文件；
	:args '{shell cmd}'命令--重新设置shell cmd输出的文件为新的参数列表；
14，通配符：*匹配0个或多个字符，局限于本目录，不递归子目录 **匹配0个或多个字符，可以递归子目录；
15,:w[rite]命令--将缓冲区内容写到磁盘中；
16,:e[dit]！命令--将磁盘内容写到缓冲区，相当于丢弃操作回滚到出版；
17,:qa[ll]！命令--全部退出，并丢弃未保存的修改；
18,:wa[ll]!命令--全部写入磁盘；
19,<C-w>s或:sp[lit]命令--水平切分窗口；
	<C-w>v或:vsp[lit]命令--垂直切分窗口； 
	:sp file 和 :vsp file -- 可以指定文件名直接打开到新窗口；
20，<C-w>w命令--窗口循环切换；
	<C-w>[h,j,k,l]命令--分别向左，向下，向上，向右切换；
21，:clo[se]或<C-w>c命令--关闭当前窗口；
	：on[ly]或<C-w>o命令--关闭除了当前窗口的其他所以窗口；
22,:set mouse=a--设置鼠标操作，打开后就可以利用鼠标来激活窗口以及调整窗口大小,选中标签，移动标签等；

day8
1,:tabe[dit] {filename}命令--新建一个标签，打开filename文件或空标签；
2，<C-w>T命令--将当前标签下的当前窗口，移动到新标签中；
3,:tabc[lose]命令--关闭当前标签；
4,：tabo[nly]命令--关闭除了当前标签的其他标签；
5，:tabn[ext] {N}或{N}gt命令--跳转到编号N的标签或下一个标签；
6，:tabp[revious]或gT命令--跳转到前一个标签;
7,:tabm[ove] {N}命令--将当前标签移动到编号N后或移动到结尾（设置鼠标操作，可直接通过鼠标调整）；

day9
1,:e[dit] {path}命令--打开指定路径文件到缓冲区；
	:e %<tab>--%表示当前活动窗口的文件路径，tab将其展开；
	:e %:h<tab>--%:h表示当前活动串口的文件夹路径，tab将其展开；
2，:find {filename}命令--在path路径下，找到filename文件并打开；
	:set path=+{some path}--配置path路径；
3，vim .命令--在shell环境下，打开文件管理器；
4，:e[dit] .命令--在命令模式下，打开文件管理器，显示当前工作目录；
5，:E[xplore]命令--在命令模式下，打开文件管理器，显示当前缓冲区所在目录；
	:Sexplore命令--在命令模式下，水平切分窗口，打开文件管理器；
	:Vexplore命令--在命令模式下，垂直切分窗口，打开文件管理器；
6，<C-^>命令--返回上一个编辑的缓冲区；
7,<C-g>命令--显示当前文件的状态；

day10
1,光标动作总结：
	h--光标向左移动一位；
	j--光标向下移动一个实际行；
	gj--光标向下移动一个屏幕行；
	k--光标向上移动一个实际行；
	gk--光标向上移动一个屏幕航；
	l--光标向右移动一位；
	0--光标移动到实际行行首；
	g0--光标移动到屏幕行行首；
	^--光标移动到实际行不为空白的行首；
	g^--光标移动到屏幕行不为空白的行首；
	$--光标移动到实际行的行尾；
	g$--光标移动到屏幕行的行尾；

	w（W）--光标移动到下一个单词（字符串）的首字母；
	b（B）--光标移动到上一个单词（字符串）的首字母；
	e（E）--光标移动到下一个单词（字符串）的尾字母；
	ge（gE）--光标移动到上一个单词（字符串）的尾字母；

2，文本对象选择总结：
	i)、i(、ib--选取圆括号中间的内容；
	a)、a(、ab--选取圆括号的内容；
	i{、i}、iB--选取花括号中间的内容；
	a{、a}、aB--选取花括号的内容；
	i[--选取方括号中间的内容；
	a[--选取方括号的内容；
	i<--选取尖括号中间的内容；
	a<--选取尖括号的内容；
	i'（i"）--选取单(双)引号中间的内容；
	a'（a"）--选取单（双）引号的内容；
	i`--选取反引号中间的内容；
	a`--选取反引号的内容；
	it--选取xml中间的内容；
	at--选取xml的内容；

	iw(W)--选取单词（字符串）;
	aw(W)--选取单词（字符串）包括一个空格；
	is--选取句子；
	as--选取句子包括一个空格；
	ip--选取段落；
	ap--选取段落包括一个空格；

3，标记以及跳转标记：
	m{a-zA-Z}--在当前位置设置一个标记，eg：mm，在当前位置标记为m；
		小写字母创建局部缓冲区，大写字母创建全局缓冲区；
	'{a-zA-Z}--跳转到标记的位置的行首字符,eg:'m；
	`{a-zA-Z}--跳转到标记的位置，eg：`m；

4,自动位置标记：
	``--跳转到跳转前的上个位置；
	`^--跳转到上一次插入的位置；
	`.--跳转到上一次修改的位置；
	`[--跳转到上一次修改或复制的内容的起始位置；
	`]--跳转到上一次修改或复制的内容的结束位置；
	`<--跳转到上一次高亮的起始位置；
	`>--跳转到上一次高亮的结束位置；

5,%命令--在匹配括号间跳转；

day11
1,<C-o>/<C-i>命令--在普通模式下，跳转到上一次/下一次移动的位置；
2，:jumps命令--查看跳转的位置列表；
3，跳转动作总结：
	[count]G--跳转到count行；
	/pattern<CR> / ?pattern<CR> / n / N --跳转到下一个或上一个匹配项；
	%命令--在匹配的括号间跳转；
	( / )--跳转到上一句或下一句的开头；
	{ / }--跳转到上一段或下一段的开头；
	H/M/L--跳转到屏幕的上方/中间/下方；
	gf--跳转到光标所在的文件名；
	<C-]>--跳转到光标所在的关键字的定义处；
	‘{mark} / `{mark}--跳转到标记的位置；
4，:changes命令--查看修改的位置列表；
	g; / g, --跳转到上一个或下一个修改的位置；
	gi--回复到最后的位置并进入到插入模式；
5,:set path?--查看目前path的路径目录；
6,:set suffixesadd+={some suffixes name}--添加文件后缀名,以便gf命令搜索文件名；

day12
1,复制与粘贴：
	一般对于vim来说，删除等于剪切；
	如果删除或剪切时不指定寄存器，会将删除或者剪切的内容，存放到无名寄存器中（""）；
	复制操作，会将复制内容存放到无名寄存器，同时也将存放到复制专用寄存器("0);

2,p(P)命令--将寄存器内容粘贴到光标后(前)；
3,gp(gP)命令--将寄存器内容粘贴到光标后(前)，粘贴后将光标移动到粘贴内容的最后一个字符或最后一行；
4,:reg命令--查看寄存器存在的内容；
5,有名寄存器：
	vim提供26个英文字母的有名寄存器："a-"z;
	用小写字母引用有名寄存器，会覆盖该寄存器的原有内容；
	用大写字母引用有名寄存器，会将新内容添加到原有内容之后；
6，黑洞寄存器："_
	想删除但并不想保存到任何寄存器中，可以使用；
7,系统剪贴板寄存器："+
	选中专用寄存器："*
	一般情况下此两种可以混用；
8,表达式寄存器："=
9,其他寄存器：
	"%--当前文件名；
	"#--轮换文件名；
	".--上次插入的文本；
	":--上次执行的ex命令；
	"/--上次查找的模式；
10，<C-r>{reg}:在插入模式下，读取寄存器reg的内容；

day13
1,宏的录制：
	qx{change}q
	q开始录制，x指定寄存器名字，{change}录制的动作内容，q停止录制；
	x如果为大写字母，跟寄存器一般情况一样，将在动作内容后增加动作；

	@x--执行寄存器x中的操作内容；
	@@--调用最近一次的宏操作；
	n@x--n次执行x宏操作；n一般输入为一个大数；
	:[range]normal @x--一般在多行可视区域下，针对每一行执行宏操作；

2,~命令--将光标处的字符转为大写，并光标向后移动一位；
3,:argdo {cmd}--允许我们对参数列表内的所有缓冲区执行一条Ex命令；
4,:let命令--使用let创建变量:
	let i=0 -- 定义一个变量，初始化为0
	echo i  -- 打印变量i的值
	let i+=1 -- i加1在赋值给i
	echo i --打印变量i的新值

day14
1,查找时设置大小写敏感性：
	\C--强制区分大小写；
	\c--强制忽略大小写；
2，set ignorecase--设置查找忽略大小写；
	set noignorecase--取消设置查找忽略大小写；
	set smartcase--设置智能推测大小写查找；
	set nosmartcase--取消设置智能推测大小写查找；
3，\v模式开关--按正则表达式查找时使用；
	magic搜索模式--圆括号需要转义、花括号的开括号需要转义（对应的比括号不用）；
			eg：/#\([0-9a-fA-F]\{6}\|[0-9a-fA-F]\{3}\)
	very magic搜索模式--假定除_、大小写字母以及数字之外的所有字符都具有特殊含义，\v开启，
			eg：/\v#([0-9a-fA-F]{6}|[0-9a-fA-F]{3}) ，相比来说少敲击几个转义字符；
4，\x--代替完整的字符集[0-9a-fA-F];
5，\V原义开关--按原义查找文本时使用；
	激活very nomagic搜索模式，使其后的模式中只有反斜杠有特殊的意义；
6，使用圆括号来捕捉子匹配：
	eg：/\v<(\w+)\_s+\1>
	任何圆括号背部的匹配文本都会被自动保存到一个临时的仓库，这时可以用\1 \2 ---\9来引用；
	\0表示引用整个匹配；
7，<与>--用于匹配单词的边界；
8，\_s--用于匹配空白符或换行符；
9,\zs--标志一个匹配的起始；
	\ze--标志一个匹配的结束；
	这两个均为零宽度元字符；
10，escape({string},{chars})--chars参数将指定的字符需要用反斜杠转义；
	eg：<C-r>=escape(@u,getcmdtype().'\') 
		getcmdtype()函数正向寻找返回符号/，反向寻找返回？；

day15
1,/<CR>--正向跳转到上一个搜索内容的下一处匹配；
	？<CR>--反向跳转到上一个搜索内容的上一次匹配；
	/or?<up>--浏览之前的查找记录；
2,:set hls[earch]--打开搜索高亮 
	:set nohls[earch]--禁用搜索高亮；
	:noh--本次禁用搜索高亮；
3,:set incsearch--设置搜索增量查询功能：
	设置后，执行搜索前可以预览第一处匹配，
	可以检查是否存在一处匹配，
	当找到了预览词汇，可以<C-r><C-w>将预览的词汇补全到搜索输入中;
4,/pattern/e<CR>--将搜索后光标移动到最后一个字符，？同样适用；

day16
1,:[range]s/{pattern}/{string}/[flags]--替换命令
	[flags]:
	g--使得命令在全局范围内执行，不过是修改一行内的匹配内容（需要全文则[range]为%）；
	c--在每一次匹配时进行询问，是否修改，
		提示y/n/a/q/l/^E/^Y
		y--替换此处匹配；
		n--忽略此处匹配；
		q--退出替换过程；
		l--替换此处匹配后退出（last）；
		a--替换此处以及之后的所有（all）；
		<C-e>--向上滚动屏幕;
		<C-y>--向下滚动屏幕;
	o--不执行替换操作,报告本次匹配的个数;
	e--屏蔽命令的错误提示;
	&--重用上一次substitute命令所用过的标志;
2,替换域中的特殊字符:
	\r--插入一个换行符;
	\t--插入一个制表符;
	\\--插入一个反斜杠;
	\1--插入第一个子匹配(最多到\9);
	\0--插入匹配模式的所有内容;
	&--插入匹配模式的所有内容;
	~--使用上一次替换命令的{string};
	\={Vim script}--执行vim脚本,返回结果为{string};
3,<C-r>/命令--读取上一次查找模式的内容;
4,:%s// --在匹配部分,连续两个/,可以重用上一次查找的模式;
5,:%s/{pattern}/\=@{register}/[flags]--\=@{register}可以引用寄存器的内容,来作为{}来作为{string};
6,g&命令--整个文件的范围内重复上一次的替换操作;等同于:%s//~/&;
7,:[range]&&命令--第一个&用作重复上一次的:s命令,第二个&用作重复上一次:s命令的标志位,总的意思就是重复选择范围并重复上一次的:s命令;
8,:argdo :[range]s/{pattern}/{string}/[flags]--在整个缓冲区替换文本;

day17
1,:[range]global[!]/{pattern}/[cmd]--默认情况下global作用范围是整个文件(相当于range为%)
					{pattern}与查找历史相互关联,可以不填,表示重用上一次查找;
					[cmd]默认使用print;
					global!或vglobal表示在没有被匹配的行上执行cmd;
2,:g/re/d命令--删除匹配re的所有的行;
3,:v/re/d命令--只保留匹配re的行,删除其他的行;
4,:g/re/y X命令--复制匹配re的所有的行,到寄存器X中(X寄存器名为大写,使用前用qxq命令将寄存器清空);
5,:global/{start}/ .,{finish} [cmd]命令--对从start开始到finish结束的所有行执行[cmd];

day18
1,安装ctags：
	sudo apt-get install exuberant-ctags
2,生成tags文件：
	在shell中--ctags filename，根据指定文件名在当前目录下生成tags文件；
			ctags -R，在当前目录下，递归子目录生成tags文件；
	在vim中--:!ctags filename or :!ctags -R,生成tags文件，其实跟shell中一样，利用！来执行shell的命令；
3,设置快捷键F5：
	:nnoremap <F5> :!ctags -R<CR>
	利用快捷键在vim中按F5更新tags文件；
4,保存文件时，自动更新tags文件：
	:autocmd BufWritePost * call system("ctags -R")
5,ctags浏览命令：
	<C-]>--跳转到匹配当前光标下关键字的第一处标签；
	g<C-]>--如果有多个标签匹配当前光标下的关键字，提示用户指定一处进行跳转，如果只有一处，则直接跳转；
	:tag {keyword}--跳转到匹配keyword的第一处标签；
	:tjump {keyword}--如果有多个标签匹配keyword，提示用户指定一处进行跳转，如果只有一处，则直接跳转；
	:pop or <C-t>--反向遍历标签历史；
	:tag--正向遍历标签历史；
	:tnext--跳转到下一处匹配的标签；
	:tprev--跳转到上一处匹配的标签；
	:tfirst--跳转到第一个匹配的标签；
	:tlast--跳转到最后一个匹配的标签；
	:tselect--提示用户总标签匹配列表中选择一处进行跳转；
