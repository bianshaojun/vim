day1：
(转移到vimNote.md)
day2
(转移到vimDay2.md)
day3 
(转移到vimDay3.md)
day4
(转移到vimDay4.md)
day5 
(转移到vimDay5.md)
day6
(转移到vimDay6.md)
day7
(转移到vimDay7.md)
day8
(转移到vimDay8.md)
day9
(转移到vimDay9.md)
day10
(转移到vimDay10.md)
day11
(转移到vimDay11.md)
day12
1,复制与粘贴：
	一般对于vim来说，删除等于剪切；
	如果删除或剪切时不指定寄存器，会将删除或者剪切的内容，存放到无名寄存器中（""）；
	复制操作，会将复制内容存放到无名寄存器，同时也将存放到复制专用寄存器("0);

2,p(P)命令--将寄存器内容粘贴到光标后(前)；
3,gp(gP)命令--将寄存器内容粘贴到光标后(前)，粘贴后将光标移动到粘贴内容的最后一个字符或最后一行；
4,:reg命令--查看寄存器存在的内容；
5,有名寄存器：
	vim提供26个英文字母的有名寄存器："a-"z;
	用小写字母引用有名寄存器，会覆盖该寄存器的原有内容；
	用大写字母引用有名寄存器，会将新内容添加到原有内容之后；
6，黑洞寄存器："_
	想删除但并不想保存到任何寄存器中，可以使用；
7,系统剪贴板寄存器："+
	选中专用寄存器："*
	一般情况下此两种可以混用；
8,表达式寄存器："=
9,其他寄存器：
	"%--当前文件名；
	"#--轮换文件名；
	".--上次插入的文本；
	":--上次执行的ex命令；
	"/--上次查找的模式；
10，<C-r>{reg}:在插入模式下，读取寄存器reg的内容；

day13
1,宏的录制：
	qx{change}q
	q开始录制，x指定寄存器名字，{change}录制的动作内容，q停止录制；
	x如果为大写字母，跟寄存器一般情况一样，将在动作内容后增加动作；

	@x--执行寄存器x中的操作内容；
	@@--调用最近一次的宏操作；
	n@x--n次执行x宏操作；n一般输入为一个大数；
	:[range]normal @x--一般在多行可视区域下，针对每一行执行宏操作；

2,~命令--将光标处的字符转为大写，并光标向后移动一位；
3,:argdo {cmd}--允许我们对参数列表内的所有缓冲区执行一条Ex命令；
4,:let命令--使用let创建变量:
	let i=0 -- 定义一个变量，初始化为0
	echo i  -- 打印变量i的值
	let i+=1 -- i加1在赋值给i
	echo i --打印变量i的新值

day14
1,查找时设置大小写敏感性：
	\C--强制区分大小写；
	\c--强制忽略大小写；
2，set ignorecase--设置查找忽略大小写；
	set noignorecase--取消设置查找忽略大小写；
	set smartcase--设置智能推测大小写查找；
	set nosmartcase--取消设置智能推测大小写查找；
3，\v模式开关--按正则表达式查找时使用；
	magic搜索模式--圆括号需要转义、花括号的开括号需要转义（对应的比括号不用）；
			eg：/#\([0-9a-fA-F]\{6}\|[0-9a-fA-F]\{3}\)
	very magic搜索模式--假定除_、大小写字母以及数字之外的所有字符都具有特殊含义，\v开启，
			eg：/\v#([0-9a-fA-F]{6}|[0-9a-fA-F]{3}) ，相比来说少敲击几个转义字符；
4，\x--代替完整的字符集[0-9a-fA-F];
5，\V原义开关--按原义查找文本时使用；
	激活very nomagic搜索模式，使其后的模式中只有反斜杠有特殊的意义；
6，使用圆括号来捕捉子匹配：
	eg：/\v<(\w+)\_s+\1>
	任何圆括号背部的匹配文本都会被自动保存到一个临时的仓库，这时可以用\1 \2 ---\9来引用；
	\0表示引用整个匹配；
7，<与>--用于匹配单词的边界；
8，\_s--用于匹配空白符或换行符；
9,\zs--标志一个匹配的起始；
	\ze--标志一个匹配的结束；
	这两个均为零宽度元字符；
10，escape({string},{chars})--chars参数将指定的字符需要用反斜杠转义；
	eg：<C-r>=escape(@u,getcmdtype().'\') 
		getcmdtype()函数正向寻找返回符号/，反向寻找返回？；

day15
1,/<CR>--正向跳转到上一个搜索内容的下一处匹配；
	？<CR>--反向跳转到上一个搜索内容的上一次匹配；
	/or?<up>--浏览之前的查找记录；
2,:set hls[earch]--打开搜索高亮 
	:set nohls[earch]--禁用搜索高亮；
	:noh--本次禁用搜索高亮；
3,:set incsearch--设置搜索增量查询功能：
	设置后，执行搜索前可以预览第一处匹配，
	可以检查是否存在一处匹配，
	当找到了预览词汇，可以<C-r><C-w>将预览的词汇补全到搜索输入中;
4,/pattern/e<CR>--将搜索后光标移动到最后一个字符，？同样适用；

day16
1,:[range]s/{pattern}/{string}/[flags]--替换命令
	[flags]:
	g--使得命令在全局范围内执行，不过是修改一行内的匹配内容（需要全文则[range]为%）；
	c--在每一次匹配时进行询问，是否修改，
		提示y/n/a/q/l/^E/^Y
		y--替换此处匹配；
		n--忽略此处匹配；
		q--退出替换过程；
		l--替换此处匹配后退出（last）；
		a--替换此处以及之后的所有（all）；
		<C-e>--向上滚动屏幕;
		<C-y>--向下滚动屏幕;
	o--不执行替换操作,报告本次匹配的个数;
	e--屏蔽命令的错误提示;
	&--重用上一次substitute命令所用过的标志;
2,替换域中的特殊字符:
	\r--插入一个换行符;
	\t--插入一个制表符;
	\\--插入一个反斜杠;
	\1--插入第一个子匹配(最多到\9);
	\0--插入匹配模式的所有内容;
	&--插入匹配模式的所有内容;
	~--使用上一次替换命令的{string};
	\={Vim script}--执行vim脚本,返回结果为{string};
3,<C-r>/命令--读取上一次查找模式的内容;
4,:%s// --在匹配部分,连续两个/,可以重用上一次查找的模式;
5,:%s/{pattern}/\=@{register}/[flags]--\=@{register}可以引用寄存器的内容,来作为{}来作为{string};
6,g&命令--整个文件的范围内重复上一次的替换操作;等同于:%s//~/&;
7,:[range]&&命令--第一个&用作重复上一次的:s命令,第二个&用作重复上一次:s命令的标志位,总的意思就是重复选择范围并重复上一次的:s命令;
8,:argdo :[range]s/{pattern}/{string}/[flags]--在整个缓冲区替换文本;

day17
1,:[range]global[!]/{pattern}/[cmd]--默认情况下global作用范围是整个文件(相当于range为%)
					{pattern}与查找历史相互关联,可以不填,表示重用上一次查找;
					[cmd]默认使用print;
					global!或vglobal表示在没有被匹配的行上执行cmd;
2,:g/re/d命令--删除匹配re的所有的行;
3,:v/re/d命令--只保留匹配re的行,删除其他的行;
4,:g/re/y X命令--复制匹配re的所有的行,到寄存器X中(X寄存器名为大写,使用前用qxq命令将寄存器清空);
5,:global/{start}/ .,{finish} [cmd]命令--对从start开始到finish结束的所有行执行[cmd];

day18
1,安装ctags：
	sudo apt-get install exuberant-ctags
2,生成tags文件：
	在shell中--ctags filename，根据指定文件名在当前目录下生成tags文件；
			ctags -R，在当前目录下，递归子目录生成tags文件；
	在vim中--:!ctags filename or :!ctags -R,生成tags文件，其实跟shell中一样，利用！来执行shell的命令；
3,设置快捷键F5：
	:nnoremap <F5> :!ctags -R<CR>
	利用快捷键在vim中按F5更新tags文件；
4,保存文件时，自动更新tags文件：
	:autocmd BufWritePost * call system("ctags -R")
5,ctags浏览命令：
	<C-]>--跳转到匹配当前光标下关键字的第一处标签；
	g<C-]>--如果有多个标签匹配当前光标下的关键字，提示用户指定一处进行跳转，如果只有一处，则直接跳转；
	:tag {keyword}--跳转到匹配keyword的第一处标签；
	:tjump {keyword}--如果有多个标签匹配keyword，提示用户指定一处进行跳转，如果只有一处，则直接跳转；
	:pop or <C-t>--反向遍历标签历史；
	:tag--正向遍历标签历史；
	:tnext--跳转到下一处匹配的标签；
	:tprev--跳转到上一处匹配的标签；
	:tfirst--跳转到第一个匹配的标签；
	:tlast--跳转到最后一个匹配的标签；
	:tselect--提示用户总标签匹配列表中选择一处进行跳转；
